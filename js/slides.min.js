function getParameterByName(t) {
    t = t.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var s = new RegExp("[\\?&]" + t + "=([^&#]*)"),
        i = s.exec(location.search);
    return null === i ? "" : decodeURIComponent(i[1].replace(/\+/g, " "))
}
var Slider = function() {
        function t(t) {
            this.el = document.querySelector(t), this.slides = this.el.querySelectorAll(".slide"), this.w = window, this.winHeight = this.w.innerHeight, this.baseURL = this.w.location.protocol + "//" + this.w.location.host + this.w.location.pathname, this.activeCount = 0, this.ARROWS = {
                LEFT: document.querySelector(".left"),
                RIGHT: document.querySelector(".right")
            }, this.CLASSLIST = {
                ACTIVE: "active",
                LOADED: "loaded",
                TRANSITION: "transition"
            }, this.KEY = {
                LEFT: 37,
                RIGHT: 39
            }, this.init()
        }
        return t.prototype.init = function() {
            var t = this.slides.length;
            this.el.style.width = t + "00%", this.sizeSlides(), this.el.classList.add(this.CLASSLIST.LOADED), this.setSlideParam()
        }, t.prototype.sizeSlides = function() {
            this.winHeight = this.w.innerHeight;
            for (var t = 0; t < this.slides.length; t++) {
                var s = this.slides[t],
                    i = t + "00%",
                    e = s.querySelector(".content");
                s.style.transform = "translateX(" + i + ")", s.style.display = "block";
                var n = e.offsetHeight;
                if (n > this.winHeight) {
                    var o = this.winHeight / n;
                    e.style.transform = "translateX(-50%) translateY(-50%) scale(" + o + ")"
                }
            }
        }, t.prototype.setSlideParam = function() {
            var t, s = getParameterByName("slide");
            "" === s || s > this.slides.length ? (t = this.slides[0], this.activeCount = 1, this.w.history.replaceState({}, "", this.baseURL + "?slide=1"), t.classList.add(this.CLASSLIST.ACTIVE)) : (t = this.slides[s - 1], this.activeCount = parseInt(s), t.classList.add(this.CLASSLIST.ACTIVE), this.el.style.transform = "translateX(-" + parseInt(s - 1) + "00vw)"), this.setArrows()
        }, t.prototype.setArrows = function() {
            var t = this;
            1 === this.activeCount ? (this.ARROWS.RIGHT.classList.add(this.CLASSLIST.ACTIVE), this.ARROWS.LEFT.classList.remove(this.CLASSLIST.ACTIVE)) : this.activeCount === this.slides.length ? (this.ARROWS.LEFT.classList.add(this.CLASSLIST.ACTIVE), this.ARROWS.RIGHT.classList.remove(this.CLASSLIST.ACTIVE)) : (this.ARROWS.LEFT.classList.add(this.CLASSLIST.ACTIVE), this.ARROWS.RIGHT.classList.add(this.CLASSLIST.ACTIVE)), document.onkeydown = function(s) {
                s.keyCode == t.KEY.LEFT || s.which == t.KEY.LEFT ? t.ARROWS.LEFT.classList.contains(t.CLASSLIST.ACTIVE) && t.moveSlides("left") : s.keyCode != t.KEY.RIGHT && s.which != t.KEY.RIGHT || t.ARROWS.RIGHT.classList.contains(t.CLASSLIST.ACTIVE) && t.moveSlides("right")
            }, this.ARROWS.LEFT.onclick = function() {
                this.classList.contains(t.CLASSLIST.ACTIVE) && t.moveSlides("left")
            }, this.ARROWS.RIGHT.onclick = function() {
                this.classList.contains(t.CLASSLIST.ACTIVE) && t.moveSlides("right")
            }
        }, t.prototype.moveSlides = function(t) {
            this.slides[this.activeCount - 1].classList.remove(this.CLASSLIST.ACTIVE), "left" === t ? this.activeCount-- : this.activeCount++, this.slides[this.activeCount - 1].classList.add(this.CLASSLIST.ACTIVE), history.pushState && this.w.history.pushState({}, "", this.baseURL + "?slide=" + this.activeCount), this.el.style.transform = "translateX(-" + parseInt(this.activeCount - 1) + "00vw)", this.setArrows()
        }, t
    }(),
    slider;
window.onload = function() {
    slider = new Slider(".slideshow")
}, window.onpopstate = function() {
    slider.setSlideParam()
}, window.onresize = function() {
    slider.sizeSlides()
};